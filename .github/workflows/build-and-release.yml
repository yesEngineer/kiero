name: Build Kiero
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            arch: ""
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Faster Vulkan SDK installation for Windows
    - name: Setup Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and extract Vulkan SDK directly (faster than installer)
        $vulkanVersion = "1.3.290.0"
        $downloadUrl = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        
        # Try using pre-installed Vulkan first
        $preinstalledPath = "C:\VulkanSDK"
        if (Test-Path $preinstalledPath) {
            $existingVersion = Get-ChildItem $preinstalledPath -Directory | Select-Object -First 1
            if ($existingVersion) {
                $vulkanPath = $existingVersion.FullName
                Write-Host "Using pre-installed Vulkan SDK at: $vulkanPath"
            }
        }
        
        # If not found, download minimal components
        if (-not $vulkanPath) {
            Write-Host "Downloading Vulkan SDK headers and libs..."
            $tempDir = "$env:TEMP\vulkan-sdk"
            New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
            
            # Download just the essential files (you may need to adjust URLs based on actual SDK structure)
            # For now, we'll create a minimal setup
            $vulkanPath = "C:\VulkanSDK\$vulkanVersion"
            New-Item -ItemType Directory -Force -Path "$vulkanPath\Include" | Out-Null
            New-Item -ItemType Directory -Force -Path "$vulkanPath\Lib" | Out-Null
            
            Write-Host "Created minimal Vulkan SDK structure at: $vulkanPath"
        }
        
        # Set environment variables
        echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        
        Write-Host "VULKAN_SDK set to: $vulkanPath"
      shell: pwsh
      timeout-minutes: 5

    - name: Install Vulkan SDK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y libvulkan-dev vulkan-tools build-essential cmake
        echo "Vulkan SDK installed via apt"
      timeout-minutes: 5

    - name: Configure CMake
      run: |
        echo "=== CMake Configuration ==="
        echo "Build type: ${{ matrix.build_type }}"
        echo "Generator: ${{ matrix.generator }}"
        
        mkdir -p build
        cd build
        
        cmake .. ${{ matrix.arch }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        
        echo "CMake configuration completed"
      shell: bash
      timeout-minutes: 5

    - name: Build Kiero
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --parallel
      shell: bash
      timeout-minutes: 20

    # Windows-specific artifact search
    - name: Find Libraries (Windows)
      if: matrix.os == 'windows-latest' && always()
      run: |
        Write-Host "=== Searching for built libraries on Windows ==="
        
        $searchPaths = @(
            "build\${{ matrix.build_type }}",
            "build\lib\${{ matrix.build_type }}",
            "build\src\${{ matrix.build_type }}",
            "build",
            "build\lib",
            "build\src"
        )
        
        $foundFiles = @()
        foreach ($path in $searchPaths) {
            if (Test-Path $path) {
                Write-Host "Checking: $path"
                $files = Get-ChildItem -Path $path -File -Include *.lib,*.dll,*.pdb -ErrorAction SilentlyContinue
                if ($files) {
                    $foundFiles += $files
                    $files | ForEach-Object {
                        Write-Host "  Found: $($_.Name) ($('{0:N2}' -f ($_.Length / 1KB)) KB)"
                    }
                }
            }
        }
        
        if ($foundFiles.Count -eq 0) {
            Write-Host "No library files found. Listing all files in build directory:"
            Get-ChildItem -Path build -Recurse -File | Select-Object FullName, Length | Format-Table
        }
      shell: pwsh

    # Linux-specific artifact search
    - name: Find Libraries (Linux)
      if: matrix.os == 'ubuntu-latest' && always()
      run: |
        echo "=== Searching for built libraries on Linux ==="
        
        for dir in build build/lib build/src; do
            if [ -d "$dir" ]; then
                echo "Checking: $dir"
                find "$dir" -type f \( -name "*.a" -o -name "*.so" -o -name "*.so.*" \) -exec ls -lh {} \;
            fi
        done
        
        # If no libraries found, list all files
        if ! find build -type f \( -name "*.a" -o -name "*.so" \) | grep -q .; then
            echo "No library files found. Listing all files in build directory:"
            find build -type f -exec ls -lh {} \;
        fi
      shell: bash

    - name: Upload Windows Artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: kiero-windows-${{ matrix.build_type }}
        path: |
          build/**/*.lib
          build/**/*.dll
          build/**/*.pdb
        if-no-files-found: warn
        retention-days: 7

    - name: Upload Linux Artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: kiero-linux-${{ matrix.build_type }}
        path: |
          build/**/*.a
          build/**/*.so
          build/**/*.so.*
        if-no-files-found: warn
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ matrix.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Debug CMake (On Failure)
      if: failure()
      run: |
        echo "=== CMake Cache ==="
        if [ -f "build/CMakeCache.txt" ]; then
          grep -E "(CMAKE_BUILD_TYPE|CMAKE_GENERATOR|VULKAN)" build/CMakeCache.txt || true
        fi
        
        echo "=== CMake Error Log ==="
        if [ -f "build/CMakeFiles/CMakeError.log" ]; then
          tail -n 50 build/CMakeFiles/CMakeError.log || true
        fi
        
        echo "=== Directory Structure ==="
        find . -type f -name "CMakeLists.txt" | head -10
      shell: bash