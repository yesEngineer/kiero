name: Build Kiero
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45  # Increased timeout
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            arch: ""
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false

    # Use setup-msbuild for Windows
    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Install Vulkan SDK (Windows) - More robust approach
    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $vulkanVersion = "1.3.290.0"
        $url = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        $installer = "$env:TEMP\VulkanSDK-Installer.exe"
        
        # Try downloading with retries
        $maxRetries = 3
        $retryCount = 0
        $downloadSuccess = $false
        
        while ($retryCount -lt $maxRetries -and -not $downloadSuccess) {
            try {
                Write-Host "Downloading Vulkan SDK (attempt $($retryCount + 1)/$maxRetries)..."
                $progressPreference = 'SilentlyContinue'  # Disable progress bar for faster download
                Invoke-WebRequest -Uri $url -OutFile $installer -TimeoutSec 600 -MaximumRetryCount 2
                $downloadSuccess = $true
                Write-Host "Download completed successfully"
            }
            catch {
                Write-Host "Download failed: $($_.Exception.Message)"
                $retryCount++
                if ($retryCount -lt $maxRetries) {
                    Write-Host "Retrying in 10 seconds..."
                    Start-Sleep -Seconds 10
                }
            }
        }
        
        if (-not $downloadSuccess) {
            Write-Error "Failed to download Vulkan SDK after $maxRetries attempts"
            exit 1
        }
        
        # Install with longer timeout
        Write-Host "Installing Vulkan SDK..."
        try {
            $process = Start-Process -FilePath $installer -ArgumentList @("/S") -PassThru -Wait
            if ($process.ExitCode -ne 0) {
                Write-Error "Vulkan SDK installation failed with exit code: $($process.ExitCode)"
                exit 1
            }
        }
        catch {
            Write-Error "Vulkan SDK installation failed: $($_.Exception.Message)"
            exit 1
        }
        
        # Verify installation
        $vulkanPath = "C:\VulkanSDK\$vulkanVersion"
        if (Test-Path $vulkanPath) {
            Write-Host "Vulkan SDK installed successfully at: $vulkanPath"
            echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        } else {
            Write-Error "Vulkan SDK installation verification failed - path not found: $vulkanPath"
            exit 1
        }
      timeout-minutes: 15  # Specific timeout for this step

    # Install Vulkan SDK (Ubuntu) - More robust
    - name: Install Vulkan SDK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        set -e  # Exit on any error
        
        # Add Vulkan repository
        wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.290-jammy.list \
          https://packages.lunarg.com/vulkan/1.3.290/lunarg-vulkan-1.3.290-jammy.list
        
        # Update package lists with retry
        sudo apt update --fix-missing || sudo apt update
        
        # Install Vulkan SDK
        sudo apt install -y vulkan-sdk
        
        # Verify installation
        if command -v vulkaninfo &> /dev/null; then
            echo "Vulkan SDK installed successfully"
            vulkaninfo --summary || echo "Vulkan info summary failed, but SDK is installed"
        else
            echo "Warning: vulkaninfo not found, but continuing..."
        fi
      timeout-minutes: 10

    # Configure CMake with better error handling
    - name: Configure CMake
      shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
      run: |
        echo "Configuring CMake..."
        echo "Build type: ${{ matrix.build_type }}"
        echo "Generator: ${{ matrix.generator }}"
        echo "Architecture: ${{ matrix.arch }}"
        
        # Show Vulkan SDK path for debugging
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "VULKAN_SDK: $env:VULKAN_SDK"
        else
          echo "VULKAN_SDK: $VULKAN_SDK"
        fi
        
        cmake -B build ${{ matrix.arch }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON
      env:
        VULKAN_SDK: ${{ env.VULKAN_SDK }}
      timeout-minutes: 5

    # Build with better error handling
    - name: Build
      shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
      run: |
        echo "Starting build..."
        cmake --build build --config ${{ matrix.build_type }} --verbose
        echo "Build completed"
      timeout-minutes: 15

    # Upload artifacts with better organization
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if build fails (for debugging)
      with:
        name: kiero-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/lib/
          build/Release/
          build/Debug/
          build/*.lib
          build/*.a
          build/*.so
          build/*.dll
        if-no-files-found: warn
        retention-days: 7  # Keep artifacts for 7 days

    # Debug step - show what was built (Windows)
    - name: List build outputs (Windows)
      if: always() && matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "=== Build directory contents ==="
        if (Test-Path "build") {
            Get-ChildItem -Path "build" -Recurse -File | Where-Object { $_.Extension -in @('.lib', '.dll', '.a', '.so') } | Format-Table FullName, Length
        } else {
            Write-Host "Build directory not found"
        }

    # Debug step - show what was built (Ubuntu)
    - name: List build outputs (Ubuntu)
      if: always() && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "=== Build directory contents ==="
        if [ -d "build" ]; then
          find build -type f \( -name "*.a" -o -name "*.so" -o -name "*.lib" -o -name "*.dll" \) 2>/dev/null || echo "No build outputs found"
        else
          echo "Build directory not found"
        fi