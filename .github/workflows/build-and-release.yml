name: Build Kiero
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            arch: ""
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Installing Vulkan SDK via Chocolatey..."
        choco install vulkan-sdk -y --no-progress
        
        $vulkanBase = "C:\VulkanSDK"
        if (Test-Path $vulkanBase) {
            $installedVersion = Get-ChildItem $vulkanBase | Select-Object -First 1 -ExpandProperty Name
            $vulkanPath = "$vulkanBase\$installedVersion"
            
            Write-Host "Vulkan SDK installed at: $vulkanPath"
            
            echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Append
            
            $env:VULKAN_SDK = $vulkanPath
            $env:PATH = "$vulkanPath\Bin;$env:PATH"
            
            Write-Host "VULKAN_SDK = $env:VULKAN_SDK"
            
            if (Test-Path "$vulkanPath\Include\vulkan") {
                Write-Host "Vulkan headers found"
            }
            if (Test-Path "$vulkanPath\Lib") {
                Write-Host "Vulkan libraries found"
                Get-ChildItem "$vulkanPath\Lib" -Filter "*.lib" | Select-Object -First 5
            }
        } else {
            Write-Error "Vulkan SDK installation failed - directory not found"
            exit 1
        }
      shell: pwsh
      timeout-minutes: 10

    - name: Install Vulkan SDK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
        
        sudo apt update
        sudo apt install -y vulkan-sdk build-essential cmake
        
        echo "Vulkan SDK installed"
        which glslc || echo "glslc not found"
        pkg-config --modversion vulkan || echo "Vulkan pkg-config not found"
      timeout-minutes: 10

    - name: Configure CMake
      run: |
        echo "=== CMake Configuration ==="
        echo "Build type: ${{ matrix.build_type }}"
        echo "Generator: ${{ matrix.generator }}"
        echo "Architecture: ${{ matrix.arch }}"
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "VULKAN_SDK: $env:VULKAN_SDK"
        else
          echo "VULKAN_SDK: ${VULKAN_SDK:-not set}"
        fi
        
        mkdir -p build
        
        cmake -B build ${{ matrix.arch }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON
        
        echo "CMake configuration completed"
      shell: bash
      timeout-minutes: 10

    - name: Build Kiero Library
      run: |
        echo "=== Building Kiero Library ==="
        cmake --build build --config ${{ matrix.build_type }} --parallel
        echo "=== Build Completed ==="
      timeout-minutes: 20

    - name: Find Built Libraries
      if: always()
      run: |
        echo "=== Searching for built libraries ==="
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          pwsh -Command "
            Write-Host 'Searching in build directory...'
            if (Test-Path 'build') {
              Get-ChildItem -Path 'build' -Recurse -Include '*.lib','*.dll','*.pdb' | ForEach-Object {
                Write-Host \"Found: \`$(\$_.FullName) (Size: \`$(\$_.Length) bytes)\"
              }
            }
            
            @('build/Release', 'build/Debug', 'build/lib', 'build/bin') | ForEach-Object {
              if (Test-Path \`$_) {
                Write-Host \"Contents of \`${_}:\"
                Get-ChildItem -Path \`$_ | Format-Table Name, Length
              }
            }
          "
        else
          echo "Searching for libraries..."
          find build -type f \( -name "*.a" -o -name "*.so" -o -name "*.so.*" \) -exec ls -la {} \; 2>/dev/null || true
          
          for dir in build build/lib build/bin; do
            if [ -d "$dir" ]; then
              echo "Contents of $dir:"
              ls -la "$dir" || true
            fi
          done
        fi
      shell: bash

    - name: Upload Windows Artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: kiero-windows-${{ matrix.build_type }}
        path: |
          build/**/*.lib
          build/**/*.dll
          build/**/*.pdb
          build/**/kiero.*
        if-no-files-found: warn
        retention-days: 7

    - name: Upload Linux Artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: kiero-linux-${{ matrix.build_type }}
        path: |
          build/**/*.a
          build/**/*.so
          build/**/*.so.*
          build/**/libkiero.*
          build/**/kiero.*
        if-no-files-found: warn
        retention-days: 7

    - name: Create Build Summary
      if: always()
      run: |
        echo "## Build Summary for ${{ matrix.os }} - ${{ matrix.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          pwsh -Command "
            if (Test-Path 'build') {
              \$libs = Get-ChildItem -Path 'build' -Recurse -Include '*.lib','*.dll' -ErrorAction SilentlyContinue
              if (\$libs) {
                echo '### Built Libraries:' >> \$env:GITHUB_STEP_SUMMARY
                \$libs | ForEach-Object {
                  echo \"- \`$(\$_.Name) (Size: \`$([math]::Round(\$_.Length / 1KB, 2)) KB)\" >> \$env:GITHUB_STEP_SUMMARY
                }
              } else {
                echo '### Warning: No libraries found in build directory' >> \$env:GITHUB_STEP_SUMMARY
              }
            } else {
              echo '### Error: Build directory not found' >> \$env:GITHUB_STEP_SUMMARY
            }
          "
        else
          if [ -d "build" ]; then
            echo "### Built Libraries:" >> $GITHUB_STEP_SUMMARY
            find build -type f \( -name "*.a" -o -name "*.so" \) -exec basename {} \; 2>/dev/null | while read -r lib; do
              echo "- $lib" >> $GITHUB_STEP_SUMMARY
            done || echo "### Warning: No libraries found" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Error: Build directory not found" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      shell: bash

    - name: Debug Information
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Matrix OS: ${{ matrix.os }}"
        echo "Matrix Build Type: ${{ matrix.build_type }}"
        
        if [ -f "build/CMakeCache.txt" ]; then
          echo "=== CMake Cache (relevant lines) ==="
          grep -E "(VULKAN|CMAKE_BUILD_TYPE|CMAKE_GENERATOR)" build/CMakeCache.txt || true
        fi
        
        if [ -f "build/CMakeFiles/CMakeError.log" ]; then
          echo "=== CMake Error Log (last 100 lines) ==="
          tail -n 100 build/CMakeFiles/CMakeError.log
        fi
        
        if [ -f "build/CMakeFiles/CMakeOutput.log" ]; then
          echo "=== CMake Output Log (last 50 lines) ==="
          tail -n 50 build/CMakeFiles/CMakeOutput.log
        fi
      shell: bash