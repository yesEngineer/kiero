name: Build Kiero
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            arch: ""
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false

    # Use setup-msbuild for Windows
    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Install Vulkan SDK (Windows) - Fixed PowerShell script
    - name: Cache Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      id: vulkan-cache
      with:
        path: C:\VulkanSDK
        key: vulkan-sdk-1.3.290.0-windows

    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest' && steps.vulkan-cache.outputs.cache-hit != 'true'
      run: |
        $vulkanVersion = "1.3.290.0"
        $url = "https://sdk.lunarg.com/sdk/download/$vulkanVersion/windows/VulkanSDK-$vulkanVersion-Installer.exe"
        $installer = "$env:TEMP\VulkanSDK-Installer.exe"
        
        # Enhanced download with proper error handling
        $maxRetries = 3
        $retryCount = 0
        $downloadSuccess = $false
        
        while ($retryCount -lt $maxRetries -and -not $downloadSuccess) {
            try {
                Write-Host "Downloading Vulkan SDK (attempt $($retryCount + 1)/$maxRetries)..."
                
                # Use Invoke-WebRequest instead of WebClient for better PowerShell compatibility
                $ProgressPreference = 'SilentlyContinue'
                Invoke-WebRequest -Uri $url -OutFile $installer -TimeoutSec 900
                
                $downloadSuccess = $true
                Write-Host "Download completed successfully"
            }
            catch {
                Write-Host "Download failed: $($_.Exception.Message)"
                $retryCount++
                if ($retryCount -lt $maxRetries) {
                    $waitTime = 10 * $retryCount
                    Write-Host "Retrying in $waitTime seconds..."
                    Start-Sleep -Seconds $waitTime
                }
            }
        }
        
        if (-not $downloadSuccess) {
            Write-Error "Failed to download Vulkan SDK after $maxRetries attempts"
            exit 1
        }
        
        # Verify download
        if (-not (Test-Path $installer)) {
            Write-Error "Installer file not found after download"
            exit 1
        }
        
        $fileSize = (Get-Item $installer).Length
        Write-Host "Downloaded installer size: $([math]::Round($fileSize / 1MB, 2)) MB"
        
        # Install with process monitoring
        Write-Host "Installing Vulkan SDK..."
        try {
            $processArgs = @{
                FilePath = $installer
                ArgumentList = @("/S")
                Wait = $true
                PassThru = $true
            }
            
            $process = Start-Process @processArgs
            
            if ($process.ExitCode -ne 0) {
                Write-Error "Vulkan SDK installation failed with exit code: $($process.ExitCode)"
                exit 1
            }
        }
        catch {
            Write-Error "Vulkan SDK installation failed: $($_.Exception.Message)"
            exit 1
        }
        
        # Verify installation
        $vulkanPath = "C:\VulkanSDK\$vulkanVersion"
        if (Test-Path $vulkanPath) {
            Write-Host "Vulkan SDK installed successfully at: $vulkanPath"
        } else {
            Write-Error "Vulkan SDK installation verification failed - path not found: $vulkanPath"
            exit 1
        }
      timeout-minutes: 20

    # Set Vulkan environment variables (Windows)
    - name: Set Vulkan Environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $vulkanVersion = "1.3.290.0"
        $vulkanPath = "C:\VulkanSDK\$vulkanVersion"
        echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        Write-Host "VULKAN_SDK set to: $vulkanPath"

    # Install Vulkan SDK (Ubuntu) - Simplified and more reliable
    - name: Install Vulkan SDK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        set -e
        
        # Update package lists
        sudo apt update
        
        # Install system Vulkan packages (more reliable than LunarG packages)
        sudo apt install -y libvulkan-dev vulkan-tools
        
        # Verify installation
        if command -v vulkaninfo &> /dev/null; then
            echo "Vulkan SDK installed successfully"
            vulkaninfo --summary || echo "Vulkan info summary failed, but SDK is installed"
        else
            echo "Warning: vulkaninfo not found, but continuing..."
        fi
      timeout-minutes: 10

    # Configure CMake with enhanced error handling
    - name: Configure CMake
      run: |
        echo "=== CMake Configuration ==="
        echo "Build type: ${{ matrix.build_type }}"
        echo "Generator: ${{ matrix.generator }}"
        echo "Architecture: ${{ matrix.arch }}"
        echo "Working directory: $(pwd)"
        
        # Show Vulkan SDK path for debugging
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "VULKAN_SDK: $env:VULKAN_SDK"
          if (Test-Path "$env:VULKAN_SDK") {
            echo "Vulkan SDK directory exists"
          } else {
            echo "Warning: VULKAN_SDK path does not exist"
          }
        else
          echo "VULKAN_SDK: ${VULKAN_SDK:-not set}"
          if [ -d "/usr/include/vulkan" ]; then
            echo "System Vulkan headers found"
          fi
        fi
        
        # Create build directory
        mkdir -p build
        
        # Configure with verbose output
        cmake -B build ${{ matrix.arch }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
        echo "CMake configuration completed"
      shell: bash
      timeout-minutes: 10

    # Build with enhanced monitoring
    - name: Build
      run: |
        echo "=== Starting Build ==="
        echo "Build configuration: ${{ matrix.build_type }}"
        
        # Build with parallel jobs where possible
        cmake --build build --config ${{ matrix.build_type }} --verbose --parallel
        
        echo "=== Build Completed ==="
      timeout-minutes: 20

    # Verify build outputs
    - name: Verify Build Outputs
      if: always()
      run: |
        echo "=== Build Verification ==="
        if [ -d "build" ]; then
          echo "Build directory exists"
          find build -type f \( -name "*.lib" -o -name "*.a" -o -name "*.so" -o -name "*.dll" \) -ls 2>/dev/null || echo "No library files found"
        else
          echo "Build directory not found"
        fi
      shell: bash

    # Upload artifacts with better organization
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kiero-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/lib/
          build/Release/
          build/Debug/
          build/*.lib
          build/*.a
          build/*.so
          build/*.dll
        if-no-files-found: warn
        retention-days: 7

    # Enhanced debug information
    - name: Debug Information
      if: always()
      run: |
        echo "=== Debug Information ==="
        echo "Matrix OS: ${{ matrix.os }}"
        echo "Matrix Build Type: ${{ matrix.build_type }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Working Directory: $(pwd)"
        echo ""
        echo "=== Directory Structure ==="
        find . -maxdepth 3 -type f \( -name "*.a" -o -name "*.so" -o -name "*.lib" -o -name "*.dll" \) 2>/dev/null || echo "No build artifacts found"
      shell: bash