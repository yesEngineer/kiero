name: Build Kiero
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: "-A x64"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            arch: ""
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Use the official Vulkan SDK installer with proper flags
    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo Downloading Vulkan SDK...
        curl -L --retry 3 --retry-delay 5 -o VulkanSDK.exe https://sdk.lunarg.com/sdk/download/1.3.290.0/windows/VulkanSDK-1.3.290.0-Installer.exe
        
        echo Installing Vulkan SDK silently...
        VulkanSDK.exe /S
        
        echo Setting environment variables...
        echo VULKAN_SDK=C:\VulkanSDK\1.3.290.0>> %GITHUB_ENV%
        echo C:\VulkanSDK\1.3.290.0\Bin>> %GITHUB_PATH%

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libvulkan-dev vulkan-tools build-essential cmake

    - name: Configure CMake
      shell: bash
      run: |
        echo "=== CMake Configuration ==="
        mkdir -p build
        cd build
        cmake .. ${{ matrix.arch }} -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --parallel

    - name: List build outputs
      if: always()
      shell: bash
      run: |
        echo "=== Build outputs ==="
        if [ -d "build" ]; then
          if [ "${{ runner.os }}" == "Windows" ]; then
            find build -name "*.lib" -o -name "*.dll" -o -name "*.exe" | head -20
          else
            find build -name "*.a" -o -name "*.so" | head -20
          fi
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kiero-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/**/*.lib
          build/**/*.dll
          build/**/*.a
          build/**/*.so
        if-no-files-found: warn